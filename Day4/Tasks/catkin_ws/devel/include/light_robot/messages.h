// Generated by gencpp from file light_robot/messages.msg
// DO NOT EDIT!


#ifndef LIGHT_ROBOT_MESSAGE_MESSAGES_H
#define LIGHT_ROBOT_MESSAGE_MESSAGES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace light_robot
{
template <class ContainerAllocator>
struct messages_
{
  typedef messages_<ContainerAllocator> Type;

  messages_()
    : real(0.0)
    , imag(0.0)  {
    }
  messages_(const ContainerAllocator& _alloc)
    : real(0.0)
    , imag(0.0)  {
  (void)_alloc;
    }



   typedef float _real_type;
  _real_type real;

   typedef float _imag_type;
  _imag_type imag;





  typedef boost::shared_ptr< ::light_robot::messages_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::light_robot::messages_<ContainerAllocator> const> ConstPtr;

}; // struct messages_

typedef ::light_robot::messages_<std::allocator<void> > messages;

typedef boost::shared_ptr< ::light_robot::messages > messagesPtr;
typedef boost::shared_ptr< ::light_robot::messages const> messagesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::light_robot::messages_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::light_robot::messages_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::light_robot::messages_<ContainerAllocator1> & lhs, const ::light_robot::messages_<ContainerAllocator2> & rhs)
{
  return lhs.real == rhs.real &&
    lhs.imag == rhs.imag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::light_robot::messages_<ContainerAllocator1> & lhs, const ::light_robot::messages_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace light_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::light_robot::messages_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::light_robot::messages_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::light_robot::messages_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::light_robot::messages_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_robot::messages_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_robot::messages_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::light_robot::messages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b8f4bab3827ae0e05d2b8fcd1e57ecf";
  }

  static const char* value(const ::light_robot::messages_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b8f4bab3827ae0eULL;
  static const uint64_t static_value2 = 0x05d2b8fcd1e57ecfULL;
};

template<class ContainerAllocator>
struct DataType< ::light_robot::messages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "light_robot/messages";
  }

  static const char* value(const ::light_robot::messages_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::light_robot::messages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 real\n"
"float32 imag\n"
"\n"
"\n"
;
  }

  static const char* value(const ::light_robot::messages_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::light_robot::messages_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.real);
      stream.next(m.imag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct messages_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::light_robot::messages_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::light_robot::messages_<ContainerAllocator>& v)
  {
    s << indent << "real: ";
    Printer<float>::stream(s, indent + "  ", v.real);
    s << indent << "imag: ";
    Printer<float>::stream(s, indent + "  ", v.imag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIGHT_ROBOT_MESSAGE_MESSAGES_H
